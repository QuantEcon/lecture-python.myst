Traceback (most recent call last):
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/nbclient/client.py", line 540, in async_execute
    await self.async_execute_cell(
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/matthewmckay/anaconda3/envs/quantecon/lib/python3.8/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Set parameters
Œ±, Œ≤, œÅ1, œÅ2, œÉ = 10.0, 0.95, 0.9, 0.0, 1.0

R = 1 / Œ≤
A = np.array([[1., 0., 0.],
              [Œ±,  œÅ1, œÅ2],
              [0., 1., 0.]])
C = np.array([[0.], [œÉ], [0.]])
G = np.array([[0., 1., 0.]])

# Form LinearStateSpace system and pull off steady state moments
Œº_z0 = np.array([[1.0], [0.0], [0.0]])
Œ£_z0 = np.zeros((3, 3))
Lz = qe.LinearStateSpace(A, C, G, mu_0=Œº_z0, Sigma_0=Œ£_z0)
Œº_z, Œº_y, Œ£_z, Œ£_y = Lz.stationary_distributions()

# Mean vector of state for the savings problem
mxo = np.vstack([Œº_z, 0.0])

# Create stationary covariance matrix of x -- start everyone off at b=0
a1 = np.zeros((3, 1))
aa = np.hstack([Œ£_z, a1])
bb = np.zeros((1, 4))
sxo = np.vstack([aa, bb])

# These choices will initialize the state vector of an individual at zero
# debt and the ergodic distribution of the endowment process. Use these to
# create the Bewley economy.
mxbewley = mxo
sxbewley = sxo
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-3-1f3ea6711730>[0m in [0;36m<module>[0;34m[0m
[1;32m     13[0m [0mŒ£_z0[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mzeros[0m[0;34m([0m[0;34m([0m[0;36m3[0m[0;34m,[0m [0;36m3[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     14[0m [0mLz[0m [0;34m=[0m [0mqe[0m[0;34m.[0m[0mLinearStateSpace[0m[0;34m([0m[0mA[0m[0;34m,[0m [0mC[0m[0;34m,[0m [0mG[0m[0;34m,[0m [0mmu_0[0m[0;34m=[0m[0mŒº_z0[0m[0;34m,[0m [0mSigma_0[0m[0;34m=[0m[0mŒ£_z0[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 15[0;31m [0mŒº_z[0m[0;34m,[0m [0mŒº_y[0m[0;34m,[0m [0mŒ£_z[0m[0;34m,[0m [0mŒ£_y[0m [0;34m=[0m [0mLz[0m[0;34m.[0m[0mstationary_distributions[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     16[0m [0;34m[0m[0m
[1;32m     17[0m [0;31m# Mean vector of state for the savings problem[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: too many values to unpack (expected 4)
ValueError: too many values to unpack (expected 4)

